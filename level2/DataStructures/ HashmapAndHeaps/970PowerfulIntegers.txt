class Solution {
    public List<Integer> powerfulIntegers(int x, int y, int bound) {
        if(bound==0)
        {
            return new ArrayList<Integer>();
        }
        int xbound=0;
        if(x!=1)
        {
            xbound=(int)(Math.log(bound)/Math.log(x));
        }
        int ybound=0;
        if(y!=1){
            ybound=(int)(Math.log(bound)/Math.log(y));
        }
        List<Integer>ans=new ArrayList<>();
        HashSet<Integer>hs=new HashSet<>();
        int xpow=1;
        for(int i=xbound;i>=0;i--)
        {
            int ypow=1;
            for(int j=ybound;j>=0;j--){
                int curr=xpow+ypow;
                if(curr<=bound)
                {
                    hs.add(curr);
                }else
                {
                    break;
                }
                ypow*=y;
            }
            xpow*=x;
        }
        for(Integer val:hs)
            ans.add(val);
        return ans;
    }
}